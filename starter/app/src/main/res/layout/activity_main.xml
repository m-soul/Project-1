<?xml version="1.0" encoding="utf-8"?>
<layout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- There is no specific reason for me using constraint layout in any of these fragments.
    actually, it might have been better if i used Linear layout in all of the fragments since
    they are basic layouts and don't have any kind of nesting. but, I wanted to practice
    and implement both constraint and linear layouts in the project so i decided to do the
    first 3 fragments in constraint and the last 2 in linear layout. and yeah i love constraint a little bit more :) -->

    <androidx.coordinatorlayout.widget.CoordinatorLayout

        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity">

        <com.google.android.material.appbar.AppBarLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:theme="@style/AppTheme.AppBarOverlay">

            <androidx.appcompat.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                android:background="?attr/colorPrimary"
                app:popupTheme="@style/AppTheme.PopupOverlay" />


        </com.google.android.material.appbar.AppBarLayout>

        <fragment
            android:id="@+id/myNavHostFragment"
            android:name="androidx.navigation.fragment.NavHostFragment"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:navGraph="@navigation/navigation"
            app:defaultNavHost="true"
            />


    </androidx.coordinatorlayout.widget.CoordinatorLayout>
</layout>